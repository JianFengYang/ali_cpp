1. 迭代器的种类有哪些？各自的功能是什么？

迭代器有五种：
(1)随机访问迭代器
(2)双向迭代器
(3)前向迭代器
(4)输入迭代器
(5)输出迭代器

随机访问迭代器是可读写，多遍扫描，可支持全部迭代器的运算。

双向迭代器可以正反向读写序列中的元素，可递增递减。

前向迭代器可以读写，但只能递增。

输入迭代器只能读不能写，只能递增；

输出迭代器只能写，不能读，智能递减。


2. 文本查询
该程序将读取用户指定的任意文本文件【当前目录下的china_daily.txt】，
然后允许用户从该文件中查找单词。查询的结果是该单词出现的次数，并列出每次出现所在的行。如果某单词在同一行中多次出现，程序将只显示该行一次。行号按升序显示。

    要求：
    a. 它必须允许用户指明要处理的文件名字。
    b.程序将存储该文件的内容，以便输出每个单词所在的原始行。
         vector<string> lines;//O(1)  完美hash
      或 map<int, string> lines;//O(logN)
      或 unorderedmap<int,string> lines;//O(1) 
         
    c. 它必须将每一行分解为各个单词，并记录每个单词所在的所有行。 
    	 在输出行号时，应保证以升序输出，并且不重复。 
    	          
    	   map<string, set<int> > word2Line;
    	   map<string, int> dict;
    	 
    d. 对特定单词的查询将返回出现该单词的所有行的行号。
	
     
    e. 输出某单词所在的行文本时，程序必须能根据给定的行号从输入文件中获取相应的行。
    	 
    示例：
    		使用提供的文件内容，然后查找单词 "element"。输出的前几行为：
    		---------------------------------------------
    	 	element occurs 125 times.
    			(line 62) element with a given key.
    			(line 64) second element with the same key.
    			(line 153) element |==| operator.
    			(line 250) the element type.
    			(line 398) corresponding element.
    		---------------------------------------------	
    		
    		  程序接口[可选]:
    			class TextQuery
    			{
    			public:
    			    void readFile(const string filename);
    			    void query(const string & word);
    			private:
							//......
    			};
    			
    			//程序测试用例
    			int main(int argc, char *argv[])
    			{
    			   string  queryWord("hello");
    			   
    			   TextQuery tq;
    			   tq.readFile("test.dat");
    			   tq.query(queryWord);			   
    			   return 0;
    			}
#include<string> 
#include <iostream>
#include<map>
#include<vector>
#include<set>
#include<fstream>
#include<sstream>
#include<algorithm>
#include<math.h>


using std::cout;
using std::endl;
using std::string;
using std::ifstream;
using std::ofstream;
using std::istringstream;


using std::map;
using std::set;
using std::vector;

class TextQuery
{
public:
	
	void readFile(const string filename);
	void query(const string &word);

private:
	vector<string> _lines;
	map<string, set<int> > _word2Line;
	map<string,size_t>  _word_count;
	

private:
	bool isWord(const string &word);	

};
bool TextQuery::isWord(const string &word)
{
		for(size_t idx=0;idx!=word.size();++idx)
		{
			if(isdigit(word[idx]))
			{
				return false;
			}

			return true;
		}
}
	
void TextQuery::readFile(const string filename)
{
	ifstream ifs(filename);

	if(!ifs)
	{
		cout<<"ifstream open error!"<<endl;
		return;
	}

	string line;
	int line_cnt=0;
	while(std::getline(ifs,line))
	{
		line_cnt++;
		istringstream iss(line);
		_lines.push_back(" ");
		_lines.push_back(line);
		string word;

		while(iss>>word)
		{
			if(isWord(word))
			{
				++_word_count[word];
				if(0==_word_count.count(word))
				{
				set<int> a;
				a.insert(line_cnt);
				_word2Line.insert(
						std::make_pair(word,a));

				}else{
					auto it=_word2Line.find(word);
					(it->second).insert(line_cnt);

				}
		}

	}

	ifs.close();

}

void TextQuery::query(const string &word)
{
	int ret=_word_count[word];
	cout<<word<<" occurs "<<ret<<" times."<<endl;
	set<int>set_Line=_word2Line[word];
	
	set::const_iterator cit=set_Line.begin();
	while(cit!=set_Line.end())
	{
		cout<<"(line "<<*cit<<")"<<_lines[*cit]<<endl;
		++cit;
	}
	
}				